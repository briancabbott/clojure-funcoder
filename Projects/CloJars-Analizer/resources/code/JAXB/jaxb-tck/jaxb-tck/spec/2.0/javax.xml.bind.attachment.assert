<javax.xml.bind.attachment|AttachmentUnmarshaller 5bd0ee7c> Enables JAXB unmarshalling of a root document containing optimized binary data formats. 
<javax.xml.bind.attachment|AttachmentUnmarshaller 46bcc5ff> This API enables an efficient cooperative processing of optimized binary data formats between a JAXB 2.0 implementation and MIME-based package processor (MTOM/XOP and WS-I AP 1.0). 
<javax.xml.bind.attachment|AttachmentUnmarshaller 4d85d8d9> JAXB unmarshals the body of a package, delegating the understanding of the packaging format being used to a MIME-based package processor that implements this abstract class. 
<javax.xml.bind.attachment|AttachmentUnmarshaller 9218b0b6> This abstract class identifies if a package requires XOP processing, {@link #isXOPPackage()} and provides retrieval of binary content stored as attachments by content-id. 
<javax.xml.bind.attachment|AttachmentUnmarshaller f4f76769> Identifying the content-id, cid, to pass to getAttachment*(String cid) For XOP processing, the infoset representation of the cid is described in step 2a in Section 3.2 Interpreting XOP Packages For WS-I AP 1.0, the cid is identified as an element or attribute of type ref:swaRef specified in Section 4.4 Referencing Attachments from the SOAP Envelope . 
<javax.xml.bind.attachment|AttachmentUnmarshaller.getAttachmentAsDataHandler(java.lang.String) ca2027c0> Lookup MIME content by content-id, cid, and return as a {@link DataHandler}. 
<javax.xml.bind.attachment|AttachmentUnmarshaller.getAttachmentAsDataHandler(java.lang.String) d3b474c2> The returned DataHandler instance must be configured to meet the following required mapping constaint. 
<javax.xml.bind.attachment|AttachmentUnmarshaller.getAttachmentAsDataHandler(java.lang.String) 777e7596> Required Mappings between MIME and Java Types MIME Type Java Type DataHandler.getContentType() instanceof DataHandler.getContent() image/gif java.awt.Image image/jpeg java.awt.Image text/xml or application/xml javax.xml.transform.Source Note that it is allowable to support additional mappings.. 
<javax.xml.bind.attachment|AttachmentUnmarshaller.getAttachmentAsDataHandler(java.lang.String) 132de39d> @return:a {@link DataHandler} that represents the MIME attachment. 
<javax.xml.bind.attachment|AttachmentUnmarshaller.getAttachmentAsDataHandler(java.lang.String) e39edbef> @throws:IllegalArgumentException if the attachment for the given cid is not found. 
<javax.xml.bind.attachment|AttachmentUnmarshaller.getAttachmentAsByteArray(java.lang.String) 473fd048> Retrieve the attachment identified by content-id, cid, as a byte[]. 
<javax.xml.bind.attachment|AttachmentUnmarshaller.getAttachmentAsByteArray(java.lang.String) a12cafb8> @return:byte[] representation of attachment identified by cid. 
<javax.xml.bind.attachment|AttachmentUnmarshaller.getAttachmentAsByteArray(java.lang.String) e39edbef> @throws:IllegalArgumentException if the attachment for the given cid is not found. 
<javax.xml.bind.attachment|AttachmentUnmarshaller.isXOPPackage() d9f6d42e> Read-only property that returns true if JAXB unmarshaller needs to perform XOP processing. 
<javax.xml.bind.attachment|AttachmentUnmarshaller.isXOPPackage() a5b9413d> This method returns true when the constraints specified in Identifying XOP Documents are met. 
<javax.xml.bind.attachment|AttachmentUnmarshaller.isXOPPackage() 7f93aa98> This value must not change during the unmarshalling process.. 
<javax.xml.bind.attachment|AttachmentUnmarshaller.isXOPPackage() 2e06bcad> @return:true when MIME context is a XOP Document. 
<javax.xml.bind.attachment|AttachmentMarshaller 6f62cb7d> Enable JAXB marshalling to optimize storage of binary data. 
<javax.xml.bind.attachment|AttachmentMarshaller 3be6b4a6> This API enables an efficient cooperative creation of optimized binary data formats between a JAXB marshalling process and a MIME-based package processor. 
<javax.xml.bind.attachment|AttachmentMarshaller 363c9c50> A JAXB implementation marshals the root body of a MIME-based package, delegating the creation of referenceable MIME parts to the MIME-based package processor that implements this abstraction. 
<javax.xml.bind.attachment|AttachmentMarshaller 53cb8070> XOP processing is enabled when {@link #isXOPPackage()} is true. 
<javax.xml.bind.attachment|AttachmentMarshaller 9e774e7d> See {@link #addMtomAttachment(DataHandler, String, String)} for details. 
<javax.xml.bind.attachment|AttachmentMarshaller 633ad73f> WS-I Attachment Profile 1.0 is supported by {@link #addSwaRefAttachment(DataHandler)} being called by the marshaller for each JAXB property related to {http://ws-i.org/profiles/basic/1.1/xsd}swaRef.. 
<javax.xml.bind.attachment|AttachmentMarshaller.addMtomAttachment(DataHandler,java.lang.String,java.lang.String) a96d6d2c> Consider MIME content data for optimized binary storage as an attachment. 
<javax.xml.bind.attachment|AttachmentMarshaller.addMtomAttachment(DataHandler,java.lang.String,java.lang.String) a6ba00c6> This method is called by JAXB marshal process when {@link #isXOPPackage()} is true, for each element whose datatype is "base64Binary", as described in Step 3 in Creating XOP Packages. 
<javax.xml.bind.attachment|AttachmentMarshaller.addMtomAttachment(DataHandler,java.lang.String,java.lang.String) 53697fd9> The method implementor determines whether data shall be attached separately or inlined as base64Binary data. 
<javax.xml.bind.attachment|AttachmentMarshaller.addMtomAttachment(DataHandler,java.lang.String,java.lang.String) 83e80532> If the implementation chooses to optimize the storage of the binary data as a MIME part, it is responsible for attaching data to the MIME-based package, and then assigning an unique content-id, cid, that identifies the MIME part within the MIME message. 
<javax.xml.bind.attachment|AttachmentMarshaller.addMtomAttachment(DataHandler,java.lang.String,java.lang.String) 3913f3e3> This method returns the cid, which enables the JAXB marshaller to marshal a XOP element that refers to that cid in place of marshalling the binary data. 
<javax.xml.bind.attachment|AttachmentMarshaller.addMtomAttachment(DataHandler,java.lang.String,java.lang.String) e57f6a8d> When the method returns null, the JAXB marshaller inlines data as base64binary data. 
<javax.xml.bind.attachment|AttachmentMarshaller.addMtomAttachment(DataHandler,java.lang.String,java.lang.String) 2919a018> The caller of this method is required to meet the following constraint. 
<javax.xml.bind.attachment|AttachmentMarshaller.addMtomAttachment(DataHandler,java.lang.String,java.lang.String) 2bca365c> If the element infoset item containing data has the attribute xmime:contentType or if the JAXB property/field representing datais annotated with a known MIME type, data.getContentType() should be set to that MIME type. 
<javax.xml.bind.attachment|AttachmentMarshaller.addMtomAttachment(DataHandler,java.lang.String,java.lang.String) 2c75af1> The elementNamespace and elementLocalName parameters provide the context that contains the binary data. 
<javax.xml.bind.attachment|AttachmentMarshaller.addMtomAttachment(DataHandler,java.lang.String,java.lang.String) 636e34c2> This information could be used by the MIME-based package processor to determine if the binary data should be inlined or optimized as an attachment. 
<javax.xml.bind.attachment|AttachmentMarshaller.addMtomAttachment(DataHandler,java.lang.String,java.lang.String) 7a7664f0> @return:a valid content-id URI (see RFC 2387) that identifies the attachment containing data. 
<javax.xml.bind.attachment|AttachmentMarshaller.addMtomAttachment(DataHandler,java.lang.String,java.lang.String) ba4b758> Otherwise, null if the attachment was not added and should instead be inlined in the message. 
<javax.xml.bind.attachment|AttachmentMarshaller.addMtomAttachment(byte[],int,int,java.lang.String,java.lang.String,java.lang.String) 4581c71c> Consider binary data for optimized binary storage as an attachment. 
<javax.xml.bind.attachment|AttachmentMarshaller.addMtomAttachment(byte[],int,int,java.lang.String,java.lang.String,java.lang.String) 43417809> Since content type is not known, the attachment's MIME content type must be set to "application/octet-stream". 
<javax.xml.bind.attachment|AttachmentMarshaller.addMtomAttachment(byte[],int,int,java.lang.String,java.lang.String,java.lang.String) 2c75af1> The elementNamespace and elementLocalName parameters provide the context that contains the binary data. 
<javax.xml.bind.attachment|AttachmentMarshaller.addMtomAttachment(byte[],int,int,java.lang.String,java.lang.String,java.lang.String) 636e34c2> This information could be used by the MIME-based package processor to determine if the binary data should be inlined or optimized as an attachment. 
<javax.xml.bind.attachment|AttachmentMarshaller.addMtomAttachment(byte[],int,int,java.lang.String,java.lang.String,java.lang.String) cad72e> @return:content-id URI, cid, to the attachment containing data or null if data should be inlined. 
<javax.xml.bind.attachment|AttachmentMarshaller.isXOPPackage() 21d88d3e> Read-only property that returns true if JAXB marshaller should enable XOP creation. 
<javax.xml.bind.attachment|AttachmentMarshaller.isXOPPackage() 3b09d416> This value must not change during the marshalling process. 
<javax.xml.bind.attachment|AttachmentMarshaller.isXOPPackage() 70b07758> When this value is true, the addMtomAttachment(...) method is invoked when the appropriate binary datatypes are encountered by the marshal process. 
<javax.xml.bind.attachment|AttachmentMarshaller.isXOPPackage() 528c47ed> Marshaller.marshal() must throw IllegalStateException if this value is true and the XML content to be marshalled violates Step 1 in Creating XOP Pacakges http://www.w3.org/TR/2005/REC-xop10-20050125/#creating_xop_packages. 
<javax.xml.bind.attachment|AttachmentMarshaller.isXOPPackage() 451597a0> "Ensure the Original XML Infoset contains no element information item with a [namespace name] of "http://www.w3.org/2004/08/xop/include" and a [local name] of Include" When this method returns true and during the marshal process at least one call to addMtomAttachment(...) returns a content-id, the MIME-based package processor must label the root part with the application/xop+xml media type as described in Step 5 of Creating XOP Pacakges.. 
<javax.xml.bind.attachment|AttachmentMarshaller.isXOPPackage() 2289ccd6> @return:true when MIME context is a XOP Package. 
<javax.xml.bind.attachment|AttachmentMarshaller.addSwaRefAttachment(DataHandler) 5722992b> Add MIME data as an attachment and return attachment's content-id, cid. 
<javax.xml.bind.attachment|AttachmentMarshaller.addSwaRefAttachment(DataHandler) dd1d0d41> This method is called by JAXB marshal process for each element/attribute typed as {http://ws-i.org/profiles/basic/1.1/xsd}swaRef. 
<javax.xml.bind.attachment|AttachmentMarshaller.addSwaRefAttachment(DataHandler) 9635c210> The MIME-based package processor implementing this method is responsible for attaching the specified data to a MIME attachment, and generating a content-id, cid, that uniquely identifies the attachment within the MIME-based package. 
<javax.xml.bind.attachment|AttachmentMarshaller.addSwaRefAttachment(DataHandler) 779cee13> Caller inserts the returned content-id, cid, into the XML content being marshalled.. 
<javax.xml.bind.attachment|AttachmentMarshaller.addSwaRefAttachment(DataHandler) f312b14d> @return:must be a valid URI used as cid. 
<javax.xml.bind.attachment|AttachmentMarshaller.addSwaRefAttachment(DataHandler) ac78a41e> Must satisfy Conformance Requirement R2928 from WS-I Attachments Profile Version 1.0.. 
