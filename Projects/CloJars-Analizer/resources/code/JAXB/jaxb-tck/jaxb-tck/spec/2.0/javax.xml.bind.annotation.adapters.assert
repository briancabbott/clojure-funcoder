<javax.xml.bind.annotation.adapters|XmlJavaTypeAdapters d77356b4>  A container for multiple @{@link XmlJavaTypeAdapter} annotations. 
<javax.xml.bind.annotation.adapters|XmlJavaTypeAdapters feb589d1> Multiple annotations of the same type are not allowed on a program element. 
<javax.xml.bind.annotation.adapters|XmlJavaTypeAdapters 11975d5c> This annotation therefore serves as a container annotation for multiple &#64;XmlJavaTypeAdapter as follows: &#64;XmlJavaTypeAdapters ({ @XmlJavaTypeAdapter(...),@XmlJavaTypeAdapter(...) }) The @XmlJavaTypeAdapters annnotation is useful for defining {@link XmlJavaTypeAdapter} annotations for different types at the package level. 
<javax.xml.bind.annotation.adapters|XmlJavaTypeAdapters 21c9934a> See "Package Specification" in javax.xml.bind.package javadoc for additional common information.. 
<javax.xml.bind.annotation.adapters|XmlJavaTypeAdapters.value() 5a383840> Collection of @{@link XmlJavaTypeAdapter} annotations. 
<javax.xml.bind.annotation.adapters|XmlJavaTypeAdapter 59c71424> Use an adapter that implements {@link XmlAdapter} for custom marshaling. 
<javax.xml.bind.annotation.adapters|XmlJavaTypeAdapter 20e36c5b> Usage: The @XmlJavaTypeAdapter annotation can be used with the following program elements: a JavaBean property field parameter package from within {@link XmlJavaTypeAdapters} When @XmlJavaTypeAdapter annotation is defined on a class, it applies to all references to the class. 
<javax.xml.bind.annotation.adapters|XmlJavaTypeAdapter fef9667d> When @XmlJavaTypeAdapter annotation is defined at the package level it applies to all references from within the package to @XmlJavaTypeAdapter.type(). 
<javax.xml.bind.annotation.adapters|XmlJavaTypeAdapter 422547e4> When @XmlJavaTypeAdapter annotation is defined on the field, property or parameter, then the annotation applies to the field, property or the parameter only. 
<javax.xml.bind.annotation.adapters|XmlJavaTypeAdapter a9f296a5> A @XmlJavaTypeAdapter annotation on a field, property or parameter overrides the @XmlJavaTypeAdapter annotation associated with the class being referenced by the field, property or parameter. 
<javax.xml.bind.annotation.adapters|XmlJavaTypeAdapter 32bf49c8> A @XmlJavaTypeAdapter annotation on a class overrides the @XmlJavaTypeAdapter annotation specified at the package level for that class. 
<javax.xml.bind.annotation.adapters|XmlJavaTypeAdapter dcaeb36d> This annotation can be used with the following other annotations: {@link XmlElement}, {@link XmlAttribute}, {@link XmlElementRef}, {@link XmlElementRefs}, {@link XmlAnyElement}. 
<javax.xml.bind.annotation.adapters|XmlJavaTypeAdapter dd8b89ee> This can also be used at the package level with the following annotations: {@link XmlAccessorType}, {@link XmlSchema}, {@link XmlSchemaType}, {@link XmlSchemaTypes}. 
<javax.xml.bind.annotation.adapters|XmlJavaTypeAdapter ae77c85> Example: See example in {@link XmlAdapter}. 
<javax.xml.bind.annotation.adapters|XmlJavaTypeAdapter.value() 86bc5f11> Points to the clsss that converts a value type to a bound type or vice versa. 
<javax.xml.bind.annotation.adapters|XmlJavaTypeAdapter.value() 7f4e8455> See {@link XmlAdapter} for more details. 
<javax.xml.bind.annotation.adapters|XmlJavaTypeAdapter.type() 58a83328> If this annotation is used at the package level, then value of the type() must be specified. 
<javax.xml.bind.annotation.adapters|XmlJavaTypeAdapter.DEFAULT cb13b6c2> Used in {@link XmlJavaTypeAdapter#type()} to signal that the type be inferred from the signature of the field, property, parameter or the class. 
<javax.xml.bind.annotation.adapters|XmlAdapter fa4806c2> Adapts a Java type for custom marshaling. 
<javax.xml.bind.annotation.adapters|XmlAdapter 155955bd> Usage: Some Java types do not map naturally to a XML representation, for example HashMap or other non JavaBean classes. 
<javax.xml.bind.annotation.adapters|XmlAdapter 4a9be360> Conversely, a XML repsentation may map to a Java type but an application may choose to accesss the XML representation using another Java type. 
<javax.xml.bind.annotation.adapters|XmlAdapter c1c491b9> For example, the schema to Java binding rules bind xs:DateTime by default to XmlGregorianCalendar. 
<javax.xml.bind.annotation.adapters|XmlAdapter 88a817a3> But an application may desire to bind xs:DateTime to a custom type, MyXmlGregorianCalendar, for example. 
<javax.xml.bind.annotation.adapters|XmlAdapter caf162fa> In both cases, there is a mismatch between bound type , used by an application to access XML content and the value type, that is mapped to an XML representation. 
<javax.xml.bind.annotation.adapters|XmlAdapter ab3a64c0> This abstract class defines methods for adapting a bound type to a value type or vice versa. 
<javax.xml.bind.annotation.adapters|XmlAdapter e11c5e68> The methods are invoked by the JAXB binding framework during marshaling and unmarshalling: XmlAdapter.marshal(...): During marshalling, JAXB binding framework invokes XmlAdapter.marshal(..) to adapt a bound type to value type, which is then marshaled to XML representation. 
<javax.xml.bind.annotation.adapters|XmlAdapter b0167521> XmlAdapter.unmarshal(...): During unmarshalling, JAXB binding framework first unmarshals XML representation to a value type and then invokes XmlAdapter.unmarshal(..) to adapt the value type to a bound type. 
<javax.xml.bind.annotation.adapters|XmlAdapter e3a2d41> Writing an adapter therefore involves the following steps: Write an adapter that implements this abstract class. 
<javax.xml.bind.annotation.adapters|XmlAdapter e4e54654> Install the adapter using the annotation {@link XmlJavaTypeAdapter} Example: Customized mapping of HashMap The following example illustrates the use of &#64;XmlAdapter and &#64;XmlJavaTypeAdapter to customize the mapping of a HashMap. 
<javax.xml.bind.annotation.adapters|XmlAdapter 690e2d54> Step 1: Determine the desired XML representation for HashMap. 
<javax.xml.bind.annotation.adapters|XmlAdapter f14c846d> &lt;hashmap> &lt;entry key="id123">this is a value&lt;/entry> &lt;entry key="id312">this is another value&lt;/entry> ... &lt;/hashmap> Step 2: Determine the schema definition that the desired XML representation shown above should follow. 
<javax.xml.bind.annotation.adapters|XmlAdapter 359b44ea> &lt;xs:complexType name="myHashMapType"> &lt;xs:sequence> &lt;xs:element name="entry" type="myHashMapEntryType" minOccurs = "0" maxOccurs="unbounded"/> &lt;/xs:sequence> &lt;/xs:complexType> &lt;xs:complexType name="myHashMapEntryType"> &lt;xs:simpleContent> &lt;xs:extension base="xs:string"> &lt;xs:attribute name="key" type="xs:int"/> &lt;/xs:extension> &lt;/xs:simpleContent> &lt;/xs:complexType> Step 3: Write value types that can generate the above schema definition. 
<javax.xml.bind.annotation.adapters|XmlAdapter 59931c6d> public class MyHashMapType { List&lt;MyHashMapEntryType> entry; } public class MyHashMapEntryType { &#64;XmlAttribute public Integer key; &#64;XmlValue public String value; } Step 4: Write the adapter that adapts the value type, MyHashMapType to a bound type, HashMap, used by the application. 
<javax.xml.bind.annotation.adapters|XmlAdapter e2814c4e> public final class MyHashMapAdapter extends XmlAdapter&lt;HashMap, MyHashMapType> { ... } Step 5: Use the adapter. 
<javax.xml.bind.annotation.adapters|XmlAdapter 3164d22a> public class Foo { &#64;XmlJavaTypeAdapter(MyHashMapAdapter.class) HashMap hashmap; ... } The above code fragment will map to the following schema: &lt;xs:complexType name="Foo"> &lt;xs:sequence> &lt;xs:element name="hashmap" type="myHashMapType" &lt;/xs:sequence> &lt;/xs:complexType> . 
<javax.xml.bind.annotation.adapters|XmlAdapter.XmlAdapter() f1b0d141> Do-nothing constructor for the derived classes. 
<javax.xml.bind.annotation.adapters|XmlAdapter.unmarshal(java.lang.Object) 6beffb1f> Convert a value type to a bound type. 
<javax.xml.bind.annotation.adapters|XmlAdapter.unmarshal(java.lang.Object) c0608cb7> @throws:Exception if there's an error during the conversion. 
<javax.xml.bind.annotation.adapters|XmlAdapter.unmarshal(java.lang.Object) 9adc8e39> The caller is responsible for reporting the error to the user through {@link javax.xml.bind.ValidationEventHandler}. 
<javax.xml.bind.annotation.adapters|XmlAdapter.marshal(java.lang.Object) c4687941> Convert a bound type to a value type. 
<javax.xml.bind.annotation.adapters|XmlAdapter.marshal(java.lang.Object) c0608cb7> @throws:Exception if there's an error during the conversion. 
<javax.xml.bind.annotation.adapters|XmlAdapter.marshal(java.lang.Object) 9adc8e39> The caller is responsible for reporting the error to the user through {@link javax.xml.bind.ValidationEventHandler}. 
<javax.xml.bind.annotation.adapters|NormalizedStringAdapter af42cbc0> {@link XmlAdapter} to handle xs:normalizedString. 
<javax.xml.bind.annotation.adapters|NormalizedStringAdapter 22875824> This adapter removes leading and trailing whitespaces, then replace any tab, CR, and LF by a whitespace character ' '. 
<javax.xml.bind.annotation.adapters|NormalizedStringAdapter.unmarshal(java.lang.String) b9d92ccc> Removes leading and trailing whitespaces of the string given as the parameter, then replace any tab, CR, and LF by a whitespace character ' '. 
<javax.xml.bind.annotation.adapters|NormalizedStringAdapter.marshal(java.lang.String) 76b35fbd> No-op. Just return the same string given as the parameter. 
<javax.xml.bind.annotation.adapters|NormalizedStringAdapter.isWhiteSpaceExceptSpace(char) 4d24b5d8> Returns true if the specified char is a white space character but not 0x20. 
<javax.xml.bind.annotation.adapters|HexBinaryAdapter 63a5ee0a> {@link XmlAdapter} for xs:hexBinary. 
<javax.xml.bind.annotation.adapters|HexBinaryAdapter fc7aa610> This {@link XmlAdapter} binds byte[] to the hexBinary representation in XML. 
<javax.xml.bind.annotation.adapters|CollapsedStringAdapter 10f90fa8> Built-in {@link XmlAdapter} to handle xs:token and its derived types. 
<javax.xml.bind.annotation.adapters|CollapsedStringAdapter 86fcbec8> This adapter removes leading and trailing whitespaces, then truncate any sequnce of tab, CR, LF, and SP by a single whitespace character ' '. 
<javax.xml.bind.annotation.adapters|CollapsedStringAdapter.unmarshal(java.lang.String) b42cd770> Removes leading and trailing whitespaces of the string given as the parameter, then truncate any sequnce of tab, CR, LF, and SP by a single whitespace character ' '. 
<javax.xml.bind.annotation.adapters|CollapsedStringAdapter.marshal(java.lang.String) 76b35fbd> No-op. Just return the same string given as the parameter. 
<javax.xml.bind.annotation.adapters|CollapsedStringAdapter.isWhiteSpace(char) 6419b3ba> returns true if the specified char is a white space character. 
